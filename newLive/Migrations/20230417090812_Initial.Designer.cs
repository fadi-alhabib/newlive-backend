// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using newLive.Models;

#nullable disable

namespace newLive.Migrations
{
    [DbContext(typeof(PatientinfoContext))]
    [Migration("20230417090812_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("newLive.Models.Booktbl", b =>
                {
                    b.Property<DateTime>("Bookdate")
                        .HasColumnType("date")
                        .HasColumnName("bookdate");

                    b.Property<string>("Bookdoctor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bookdoctor");

                    b.Property<string>("Bookname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("bookname");

                    b.Property<string>("Booksection")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("booksection");

                    b.ToTable("booktbl", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Dignose", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient id");

                    b.Property<string>("Digognses")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("digognses");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("doctor name");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patient name");

                    b.HasKey("PatientId");

                    b.ToTable("dignoses", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Doctorsection", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorID");

                    b.Property<string>("Doctorname")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("doctorname");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("sectionID");

                    b.HasKey("DoctorId")
                        .HasName("PK__doctorse__722485966DD144CD");

                    b.HasIndex("SectionId");

                    b.ToTable("doctorsection", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Doctorsinfo", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_id");

                    b.Property<string>("DAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("D-address");

                    b.Property<string>("DEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("D_email");

                    b.Property<string>("DGender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("D_gender");

                    b.Property<string>("DPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("D_phone");

                    b.Property<string>("DSpcelization")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("D_spcelization");

                    b.Property<int?>("DoctorAge")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_age");

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Doctor_name");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("date")
                        .HasColumnName("hire_date");

                    b.HasKey("DoctorId");

                    b.ToTable("doctorsinfos", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Doctorssection", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Doctorname")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("doctorname");

                    b.Property<int?>("SectionsId")
                        .HasColumnType("int")
                        .HasColumnName("sectionsID");

                    b.HasKey("DoctorId")
                        .HasName("PK__Doctorss__722485961B1324B0");

                    b.HasIndex("SectionsId");

                    b.ToTable("Doctorssection", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Login", b =>
                {
                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.Property<string>("Usertype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("usertype");

                    b.ToTable("login", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Patientinfo", b =>
                {
                    b.Property<int>("Patientid")
                        .HasColumnType("int")
                        .HasColumnName("patientid");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("Age")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("age");

                    b.Property<string>("EMail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("E-mail");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("gender");

                    b.Property<string>("PatientName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("patient-name");

                    b.Property<string>("Phonenumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phonenumber");

                    b.HasKey("Patientid");

                    b.ToTable("patientinfos", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("sectionID");

                    b.Property<string>("Sectionname")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("sectionname");

                    b.HasKey("SectionId")
                        .HasName("PK__section__3F58FD32D65EAC72");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Section1", b =>
                {
                    b.Property<int>("SectionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sectionsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionsId"));

                    b.Property<string>("Sectionsname")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("sectionsname");

                    b.HasKey("SectionsId")
                        .HasName("PK__sections__F7701F409D7F3BC6");

                    b.ToTable("sections", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Surgerytblinfo", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient ID");

                    b.Property<string>("DoctorIdName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("doctor ID&Name");

                    b.Property<DateTime?>("SurgeryDate")
                        .HasColumnType("date")
                        .HasColumnName("surgery_date");

                    b.Property<string>("SurgeryRoom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surgery_room");

                    b.Property<double?>("SurgeryTime")
                        .HasColumnType("float")
                        .HasColumnName("surgery_time");

                    b.Property<string>("SurgeryType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("surgery_type");

                    b.HasKey("PatientId");

                    b.ToTable("surgerytblinfos", (string)null);
                });

            modelBuilder.Entity("newLive.Models.Doctorsection", b =>
                {
                    b.HasOne("newLive.Models.Section", "Section")
                        .WithMany("Doctorsections")
                        .HasForeignKey("SectionId")
                        .HasConstraintName("FK__doctorsec__secti__74AE54BC");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("newLive.Models.Doctorssection", b =>
                {
                    b.HasOne("newLive.Models.Section1", "Sections")
                        .WithMany("Doctorssections")
                        .HasForeignKey("SectionsId")
                        .HasConstraintName("FK__Doctorsse__secti__0C85DE4D");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("newLive.Models.Section", b =>
                {
                    b.Navigation("Doctorsections");
                });

            modelBuilder.Entity("newLive.Models.Section1", b =>
                {
                    b.Navigation("Doctorssections");
                });
#pragma warning restore 612, 618
        }
    }
}
